AWSTemplateFormatVersion: 2010-09-09

# Edit DomainName and CertificateArn here to move
# the project from subdomains on talusanalytics.com
# to a project-specific domain name.

# the project name is automatically pulled from the
# stack name given when invoking this template.

# command to run build-stack:
# aws cloudformation deploy --stack-name [projectname] --template-file build-stack.yaml --capabilities CAPABILITY_NAMED_IAM
Parameters:
  DomainName:
    Type: String
    Default: 'viralemergence.org'
  CertificateArn:
    Type: String
    Default: 'arn:aws:acm:us-east-1:294062812217:certificate/e2b8a4a2-50d7-4055-b405-391e55a83ae0'

Resources:
  # Using lambda to generate random string to use in headers between CF and S3
  # this locks down the s3 buckets so that their websites are only accessible
  # to cloudfront, so that they S3 website urls don't go around the lambda-at-edge
  # password checking on cloudfront requests

  # execution role for the lambda custom cloudfront resource
  RandomStringExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:*'
                Resource: '*'

  # lambda function to generate pseudo-random strings
  RandomStringLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          const response = require("cfn-response");

          const randomString = (length) => {
              const chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
              var result = '';
              for (var i = length; i > 0; --i) result += chars[Math.floor(Math.random() * chars.length)];
              return result;
          };

          exports.handler = (event, context) => {
            const str = randomString(event['ResourceProperties']['Length']);
            const responseData = {RandomString: str};
            response.send(event, context, response.SUCCESS, responseData);
          };
      Handler: index.handler
      Runtime: nodejs14.x
      Role: !GetAtt RandomStringExecutionRole.Arn
      MemorySize: 128
      Timeout: 20

  # the custom resource itself, this is what calls
  # the lambda once per create / update and makes
  # sure all of the resources below get the same
  # pseudo-random string.
  ProjectInternalHeaderString:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      Length: 16
      ServiceToken: !GetAtt RandomStringLambdaFunction.Arn

  ## Generate passwords to restrict access on dev sites
  ProdSitePassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ['-', [!Ref AWS::StackName, 'ProdSitePassword']]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "prod"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  StagingSitePassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ['-', [!Ref AWS::StackName, 'StagingSitePassword']]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "staging"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  ReviewSitePassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ['-', [!Ref AWS::StackName, 'ReviewSitePassword']]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "review"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  DevSitePassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Join ['-', [!Ref AWS::StackName, 'DevSitePassword']]
      GenerateSecretString:
        SecretStringTemplate: '{"username": "dev"}'
        GenerateStringKey: 'password'
        PasswordLength: 16
        ExcludeCharacters: '"@/\'

  # Execution role for the basic auth lambda
  AuthLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'edgelambda.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/CloudWatchLogsFullAccess'
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:*'
                Resource: '*'
        - PolicyName: allowSecretsManager
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource:
                  - !Ref ProdSitePassword
                  - !Ref StagingSitePassword
                  - !Ref ReviewSitePassword
                  - !Ref DevSitePassword

  BasicAuthLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Join ['-', [!Ref AWS::StackName, 'basic-auth']]
      Role: !GetAtt AuthLambdaExecutionRole.Arn
      Runtime: python3.11
      Handler: 'index.lambda_handler'
      MemorySize: 128
      Timeout: 5
      Code:
        ZipFile: |
          import os
          import json
          import base64
          from functools import cache

          import boto3
          from botocore.vendored import requests
          from botocore.exceptions import ClientError

          SESSION = boto3.session.Session()
          STACK_NAME = os.environ['AWS_LAMBDA_FUNCTION_NAME'].split('.')[1].split('-basic-auth')[0]

          # lambda@edge must be deployed in us-east-1, so we can assume
          # that the entire stack (including secrets) was deployed there
          REGION = 'us-east-1'

          UNAUTHORIZED_RESPONSE = {
              'status': '401',
              'statusDescription': 'Unauthorized',
              'headers': {
                  'www-authenticate': [
                      {
                          'key': 'WWW-Authenticate',
                          'value': 'Basic'
                      }
                  ]
              }
          }


          @cache
          def get_secret(secret_name: str, region_name: str):
              client = SESSION.client(
                  service_name='secretsmanager',
                  region_name=region_name
              )

              try:
                  get_secret_value_response = client.get_secret_value(
                      SecretId=secret_name
                  )

                  if 'SecretString' in get_secret_value_response:
                      secret = get_secret_value_response['SecretString']
                      return json.loads(secret)

              except ClientError as e:
                      raise e


          def lambda_handler(event, _):
              request = event['Records'][0]['cf']['request']
              headers = request['headers']
              host = headers['host'][0]['value']


              try:
                  authorization_header = headers['authorization'][0]['value']

                  if not authorization_header:
                      return UNAUTHORIZED_RESPONSE


                  match host:
                      case 'pharos.viralemergence.org':
                          secret = get_secret(STACK_NAME + '-ProdSitePassword', REGION)

                      case 'staging-pharos.viralemergence.org':
                          secret = get_secret(STACK_NAME + '-StagingSitePassword', REGION)

                      case 'review-pharos.viralemergence.org':
                          secret = get_secret(STACK_NAME + '-ReviewSitePassword', REGION)

                      case 'dev-pharos.viralemergence.org':
                          secret = get_secret(STACK_NAME + '-DevSitePassword', REGION)

                      case _:
                          secret = None

                  if not secret:
                      return UNAUTHORIZED_RESPONSE

                  auth_string = 'Basic ' + base64.b64encode(
                          (secret['username'] + ':' + secret['password']).encode()
                      ).decode()

                  if authorization_header == auth_string:
                      return request
                  else:
                      return UNAUTHORIZED_RESPONSE

              except KeyError:
                  return UNAUTHORIZED_RESPONSE

  BasicAuthLambdaVersion5:
    Type: 'AWS::Lambda::Version'
    Properties:
      Description: ''
      FunctionName: !Ref BasicAuthLambda

  ############ Dev site setup ############
  S3DevBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', ['dev', !Ref AWS::StackName]]
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  # the bucket hosts the website. This is
  # not the standard way to connect S3 to
  # cloudfront, but allows us to do redirects
  # and pretty urls from S3, instead of needing
  # a separate webserver. The StringEquals
  # condition checks for the Referer header
  # set by cloudfront so that this website
  # can't be accessed except by cloudfront.
  S3DevBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Join ['-', ['dev', !Ref AWS::StackName]]
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Condition:
              StringEquals:
                'aws:Referer': !GetAtt ProjectInternalHeaderString.RandomString
            Resource:
              !Join ['', ['arn:aws:s3:::', 'dev-', !Ref AWS::StackName, '/*']]

  # Fairly standard CF distribution, with the difference
  # that the S3 bucket is added as a CustomOrigin pointed
  # at the S3 website instead of as an S3 origin. The
  # OriginCustomHeaders Referer header tells S3 that this
  # is the correct cloudfront distribution to respond to.
  DevDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Join ['', ['dev-pharos.', !Ref DomainName]]
        Origins:
          - DomainName:
              !Select [1, !Split ['//', !GetAtt S3DevBucket.WebsiteURL]]
            Id: myCustomOrigin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
            OriginCustomHeaders:
              - HeaderName: 'Referer'
                HeaderValue: !GetAtt ProjectInternalHeaderString.RandomString
        HttpVersion: http2
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: myCustomOrigin
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'true'
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: 'viewer-request'
              LambdaFunctionARN: !Ref BasicAuthLambdaVersion5
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  ########### Review site setup ############
  # The following blocks follow the same pattern
  # documented in the dev site setup.
  S3ReviewBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', ['review', !Ref AWS::StackName]]
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  S3ReviewBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Join ['-', ['review', !Ref AWS::StackName]]
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Condition:
              StringEquals:
                'aws:Referer': !GetAtt ProjectInternalHeaderString.RandomString
            Resource:
              !Join [
                '',
                ['arn:aws:s3:::', 'review-', !Ref AWS::StackName, '/*'],
              ]

  ReviewDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Join ['', ['review-pharos.', !Ref DomainName]]
        Origins:
          - DomainName:
              !Select [1, !Split ['//', !GetAtt S3ReviewBucket.WebsiteURL]]
            Id: myCustomOrigin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
            OriginCustomHeaders:
              - HeaderName: 'Referer'
                HeaderValue: !GetAtt ProjectInternalHeaderString.RandomString
        HttpVersion: http2
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: myCustomOrigin
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'true'
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: 'viewer-request'
              LambdaFunctionARN: !Ref BasicAuthLambdaVersion5
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  ############ Staging site setup ############
  S3StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', ['staging', !Ref AWS::StackName]]
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  S3StagingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Join ['-', ['staging', !Ref AWS::StackName]]
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Condition:
              StringEquals:
                'aws:Referer': !GetAtt ProjectInternalHeaderString.RandomString
            Resource:
              !Join [
                '',
                ['arn:aws:s3:::', 'staging-', !Ref AWS::StackName, '/*'],
              ]

  StagingDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Join ['', ['staging-pharos.', !Ref DomainName]]
        Origins:
          - DomainName:
              !Select [1, !Split ['//', !GetAtt S3StagingBucket.WebsiteURL]]
            Id: myCustomOrigin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
            OriginCustomHeaders:
              - HeaderName: 'Referer'
                HeaderValue: !GetAtt ProjectInternalHeaderString.RandomString
        HttpVersion: http2
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: myCustomOrigin
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'true'
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: 'viewer-request'
              LambdaFunctionARN: !Ref BasicAuthLambdaVersion5
        PriceClass: PriceClass_100
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

  ############ Prod site setup ############
  S3ProdBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['-', ['prod', !Ref AWS::StackName]]
      WebsiteConfiguration:
        ErrorDocument: index.html
        IndexDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  S3ProdBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Join ['-', ['prod', !Ref AWS::StackName]]
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Condition:
              StringEquals:
                'aws:Referer': !GetAtt ProjectInternalHeaderString.RandomString
            Resource:
              !Join ['', ['arn:aws:s3:::', 'prod-', !Ref AWS::StackName, '/*']]

  ProdDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Aliases:
          - !Join ['', ['pharos.', !Ref DomainName]]
        Origins:
          - DomainName:
              !Select [1, !Split ['//', !GetAtt S3ProdBucket.WebsiteURL]]
            Id: myCustomOrigin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
            OriginCustomHeaders:
              - HeaderName: 'Referer'
                HeaderValue: !GetAtt ProjectInternalHeaderString.RandomString
        HttpVersion: http2
        Enabled: 'true'
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          CachedMethods:
            - GET
            - HEAD
          TargetOriginId: myCustomOrigin
          SmoothStreaming: 'false'
          ForwardedValues:
            QueryString: 'true'
          ViewerProtocolPolicy: redirect-to-https
          # LambdaFunctionAssociations:
          #   - EventType: 'viewer-request'
          #     LambdaFunctionARN: !Ref BasicAuthLambdaVersion4
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.2_2018
          SslSupportMethod: sni-only

Outputs:
  DevCloudFrontID:
    Value: !Ref DevDistribution
    Description: Dev CloudFront ID
  DevCloudFrontURL:
    Value: !GetAtt DevDistribution.DomainName
    Description: CloudFront URL for updating DNS record
  DevSitePassword:
    Value: !Ref DevSitePassword
    Description: Secret for dev site login

  ReviewCloudFrontID:
    Value: !Ref ReviewDistribution
    Description: Review CloudFront ID
  ReviewCloudFrontURL:
    Value: !GetAtt ReviewDistribution.DomainName
    Description: CloudFront URL for updating DNS record
  ReviewSitePassword:
    Value: !Ref ReviewSitePassword
    Description: Secret for review site login

  StagingCloudFrontID:
    Value: !Ref StagingDistribution
    Description: Staging CloudFront ID
  StagingCloudFrontURL:
    Value: !GetAtt StagingDistribution.DomainName
    Description: CloudFront URL for updating DNS record
  StagingSitePassword:
    Value: !Ref StagingSitePassword
    Description: Secret for staging site login

  ProdCloudFrontID:
    Value: !Ref ProdDistribution
    Description: Prod CloudFront ID
  ProdCloudFrontURL:
    Value: !GetAtt ProdDistribution.DomainName
    Description: CloudFront URL for updating DNS record
  ProdSitePassword:
    Value: !Ref ProdSitePassword
    Description: Secret for Prod site login
